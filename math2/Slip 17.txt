 1.WritethePythoncodetoprint‘Pythonisbad’ and‘Pythoniswonderful’ ,where
 wonderful isglobalvariableandbadislocalvariable

def print_messages():
    bad = "bad"
    print(f'Python is {bad}')
    print(f'Python is {wonderful}')
    print_messages()



 Q.2.Attemptanytwoofthefollowing. [10]
 1.UsingPythoncodeconstructanytwomatricesAandBtoshowthat
 (AB)−1=B−1A−1.
    
    
    import numpy as np
A = np.array([[2, 3],[1, 4]])
B = np.array([[5, 1],[6, 2]])
AB = np.dot(A, B)
AB_inverse = np.linalg.inv(AB)
B_inverse = np.linalg.inv(B)
A_inverse = np.linalg.inv(A)
if np.allclose(AB_inverse, np.dot(B_inverse, A_inverse)):
    print("(AB)^(-1) is equal to B^(-1)A^(-1)")
else:
    print("(AB)^(-1) is not equal to B^(-1)A^(-1)")




 Q.2
    2.Uselinsolvecodeinpythontosolvethefollowingsystemof linearequations
    
    
    
    from sympy import symbols, Eq, linsolve
x, y, z = symbols('x y z')
eq1 = Eq(x - 2*y + 3*z, 7)
eq2 = Eq(2*x + y + z, 4)
eq3 = Eq(-3*x + 2*y - 2*z, -10)
solution = linsolve([eq1, eq2, eq3], x, y, z)
x_solution, y_solution, z_solution = solution.args[0]
print("Solution:")
print(f"x = {x_solution}")
print(f'y = {y_solution}')
print(f'z = {z_solution}')




 3.Writepythoncodetofindtraceandtransposeofthematrix
    
    import numpy as np
A = np.array([[1, 3, 3],[2, 2, 3],[4, 2, 1]])
trace_A = np.trace(A)
transpose_A = np.transpose(A)
print("Matrix A:")
print(A)
print("Trace of A:", trace_A)
print("Transpose of A:")
print(transpose_A)
































