 Q.1 Attempt any Tow of the following.
  (A).Write a Python program to plot 2D graph of the function  f(x)= sin (x) and
 g(x) = cos (x) in [-2*pi,2*pi]



import numpy as np 
import matplotlib.pyplot as plt 
x = np.linspace(-2 * np.pi, 2 * np.pi, 1000) 
f_x = np.sin(x) 
g_x = np.cos(x) 
fig, ax = plt.subplots() 
ax.plot(x, f_x, label='f(x) = sin(x)') 
ax.plot(x, g_x, label='g(x) = cos(x)') 
ax.set_title('Graph of f(x) = sin(x) and g(x) = cos(x)') 
ax.set_xlabel('x') 
ax.set_ylabel('y') 
ax.legend() 
plt.show()


(B) Write n Python program to plot the 2D graph of the function f(x)=e(x)sin(x) 
in [-5*pi,5*pi] with blue points line with upward point line with upward pointing 
triangle. 


import numpy as np 
import matplotlib.pyplot as plt 
def f(x): 
return np.exp(x) * np.sin(x) 
x = np.linspace(-5*np.pi, 5*np.pi, 500) 
y = f(x) 
plt.plot(x, y, 'b^-', linewidth=1, markersize=4) 
plt.xlabel('x') 
plt.ylabel('f(x)') 
plt.title('2D Graph of f(x) = e^(x) * sin(x)') 
plt.show() 


(C)Write a Python program to plot the 3D graph of the function f(x) = sin(x^2 
+ y^2), -6< x,y < 6.


import numpy as np 
import matplotlib.pyplot as plt 
from mpl_toolkits.mplot3d import Axes3D 
def f(x, y): 
return np.sin(x**2 + y**2) 
x = np.arange(-6, 6, 0.1) 
y = np.arange(-6, 6, 0.1) 
X, Y = np.meshgrid(x, y) 
Z = f(X, Y) 
fig = plt.figure() 
ax = fig.add_subplot(111, projection='3d') 
ax.plot_surface(X, Y, Z, cmap='viridis') 
ax.set_xlabel('x') 
ax.set_ylabel('y') 
ax.set_zlabel('f(x, y)') 
ax.set_title('3D Graph of f(x, y) = sin(x^2 + y^2)') 
plt.show()



Q,2
(A).Write a python program to reflect the line segment joining the points A[-5, 
2], B[3, -4] through the line y = 2x - 1.



import numpy as np 
import matplotlib.pyplot as plt 
A = np.array([-5, 2]) 
B = np.array([3, -4]) 
m = 2  
c = -1   
midpoint = (A + B) / 2 
direction = np.array([1, m]) 
projection = (2 * midpoint.dot(direction) - 2 * c * direction) / (1 + m**2) 
reflected_A = midpoint + (projection - midpoint) 
reflected_B = midpoint - (projection - midpoint) 
plt.plot([A[0], B[0]], [A[1], B[1]], 'bo-', label='Original Line Segment AB') 
plt.plot([reflected_A[0], reflected_B[0]], [reflected_A[1], reflected_B[1]], 'ro-', 
label='Reflected Line Segment A\'B\'') 
plt.xlabel('x') 
plt.ylabel('y') 
plt.legend() 
plt.title('Reflection of Line Segment AB through y = 2x - 1') 
plt.grid() 
plt.show()



(B).Write a Python program lo find the area and perimeter of a polygon with 
vertices (0, 0), (-2, 0), (5,5), (1, -1)


import math 
vertices = [(0, 0), (-2, 0), (5, 5), (1, -1)] 
def calculate_area(vertices): 
area = 0 
for i in range(len(vertices)): 
x1, y1 = vertices[i] 
x2, y2 = vertices[(i + 1) % len(vertices)] 
area += (x1 * y2 - x2 * y1) 
return abs(area) / 2 
def calculate_perimeter(vertices): 
perimeter = 0 
for i in range(len(vertices)): 
x1, y1 = vertices[i] 
x2, y2 = vertices[(i + 1) % len(vertices)] 
perimeter += math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) 
return perimeter 
area = calculate_area(vertices) 
perimeter = calculate_perimeter(vertices) 
print("Area of the polygon: ", area) 
print("Perimeter of the polygon: ",perimeter)


(C).Write a. Python program to plot the 3D graph of the function f(x, y) = sin x 
+ cos y,x, y belongs [-2*pi,2*pi] using wireframe plot.



import numpy as np 
import matplotlib.pyplot as plt 
from mpl_toolkits.mplot3d import Axes3D 
x = np.linspace(-2 * np.pi, 2 * np.pi, 100) 
y = np.linspace(-2 * np.pi, 2 * np.pi, 100) 
X, Y = np.meshgrid(x, y) 
Z = np.sin(X) + np.cos(Y) 
fig = plt.figure() 
ax = fig.add_subplot(111, projection='3d') 
ax.plot_wireframe(X, Y, Z) 
ax.set_xlabel('X') 
ax.set_ylabel('Y') 
ax.set_zlabel('Z') 
ax.set_title('3D Wireframe Plot of f(x, y) = sin(x) + cos(y)') 
plt.show()



(A)write a Python program to solve the following LPP  

Max Z = 3.5x +2 y 
Subjected to  
x + y >= 5 
x  >= 4 
y <= 2 
x > 0 , y > 0 


import numpy as np 
from scipy.optimize import linprog 
c = [-3.5, -2] 
A = [[-1, -1], [-1, 0], [0, 1]] 
b = [-5, -4, 2] 
x_bounds = (0, None) 
y_bounds = (0, None) 
result = linprog(c, A_ub=A, b_ub=b, bounds=[x_bounds, y_bounds]) 
if result.success: 
print("Optimal solution found:") 
print("x =", result.x[0]) 
print("y =", result.x[1]) 
print("Maximum value of Z =", -result.fun) 
else: 
print("Optimal solution not found.")



















































































































