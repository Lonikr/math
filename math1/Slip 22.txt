Q.1) 
(A)Write a python program to draw 2D plot y = log(x^2) + sin(x) with suitable
 label in the x axis , y axis and a tittle in [-5*pi,5*pi]


import numpy as np 
import matplotlib.pyplot as plt 
x = np.linspace(-5 * np.pi, 5 * np.pi, 500) 
y = np.log(x**2) + np.sin(x) 
plt.plot(x, y) 
plt.xlabel('x-axis Label') # Label for x-axis 
plt.ylabel('y-axis Label') # Label for y-axis 
plt.title('2D Plot of y = log(x^2) + sin(x)') # Title of the plot 
plt.show() 


(B).Write a python program to plot 3D dimensional  Contour plot of parabola z 
= x^2 + y^2 , -6 < x,y < 6


import numpy as np 
import matplotlib.pyplot as plt 
from mpl_toolkits import mplot3d 
x = np.linspace(-6, 6, 100) 
y = np.linspace(-6, 6, 100) 
X, Y = np.meshgrid(x, y) 
Z = X**2 + Y**2 
fig = plt.figure() 
ax = fig.add_subplot(111, projection='3d') 
ax.contour3D(X, Y, Z, 100, cmap='viridis') 
ax.set_xlabel('x') 
ax.set_ylabel('y') 
ax.set_zlabel('z') 
ax.set_title('3D Contour Plot of z = x^2 + y^2') 
plt.show()



(C)Write a python program to draw 2D plot y = x sin(1/x^2) in [-5,5] with 
suitable label in the x axis, y axis a title and location of legend to lower right 
corner.

import numpy as np 
import matplotlib.pyplot as plt 
x = np.linspace(-5, 5, 500) 
y = x * np.sin(1 / x**2) 
plt.plot(x, y, label='y = x * sin(1/x^2)') 
plt.xlabel('x-axis Label') # Label for x-axis 
plt.ylabel('y-axis Label') # Label for y-axis 
plt.title('2D Plot of y = x * sin(1/x^2)') # Title of the plot 
plt.legend(loc='lower right') # Legend in lower-right corner 
plt.show() 


Q.2 Attempt any tow of the following.

(A).Write n python program to find the angle at each vertices of the triangle 
ABC where A[0,0] B[2,2] and C[0,2].



import numpy as np 
A = np.array([0, 0]) 
B = np.array([2, 2]) 
C = np.array([0, 2]) 
AB = np.linalg.norm(B - A)  # Length of side AB 
BC = np.linalg.norm(C - B)  # Length of side BC 
AC = np.linalg.norm(C - A)  # Length of side AC 
angle_A = np.arccos((AB**2 + AC**2 - BC**2) / (2 * AB * AC)) 
angle_B = np.arccos((-AB**2 + AC**2 + BC**2) / (2 * AC * BC)) 
angle_C = np.pi - angle_A - angle_B 
angle_A_deg = np.degrees(angle_A) 
angle_B_deg = np.degrees(angle_B) 
angle_C_deg = np.degrees(angle_C) 
print("Angle at vertex A: {:.2f} degrees".format(angle_A_deg)) 
print("Angle at vertex B: {:.2f} degrees".format(angle_B_deg)) 
print("Angle at vertex C: {:.2f} degrees".format(angle_C_deg))


(B)Write a Python program to Reflect the Point P[3,6] through the line x - 2y + 
4 = 0.


import numpy as np 
P = np.array([3, 6]) 
a = 1  # Coefficient of x in the line equation 
b = -2  # Coefficient of y in the line equation 
c = 4  # Constant term in the line equation 
dist = abs(a * P[0] + b * P[1] + c) / np.sqrt(a**2 + b**2) 
reflected_x = P[0] - 2 * a * dist / (a**2 + b**2) 
reflected_y = P[1] - 2 * b * dist / (a**2 + b**2) 
reflected_P = np.array([reflected_x, reflected_y]) 
print("Reflected Point: ({:.2f}, {:.2f})".format(reflected_P[0], reflected_P[1]))


(C).Write a Python program to find the area and perimeter of the  ABC, where 
A[0, 0] B[5, 0], C[3,3].


import numpy as np 
A = np.array([0, 0]) 
B = np.array([5, 0]) 
C = np.array([3, 3]) 
AB = np.linalg.norm(B - A) 
BC = np.linalg.norm(C - B) 
CA = np.linalg.norm(A - C) 
s = (AB + BC + CA) / 2 
area = np.sqrt(s * (s - AB) * (s - BC) * (s - CA)) 
perimeter = AB + BC + CA 
print("Triangle ABC:") 
print("Side AB:", AB) 
print("Side BC:", BC) 
print("Side CA:", CA) 
print("Area:", area) 
print("Perimeter:", perimeter)




Q.3 Attempt the Folowing.

(A).write a Python program to solve the following LPP 

Max Z = x + y 
Subjected to  
x + y <= 11 
x >= 6  
y >= 6  
x > 0, y > 0 


from pulp import * 
prob = LpProblem("Maximization Problem", LpMaximize) 
x = LpVariable("x", lowBound=0) 
y = LpVariable("y", lowBound=0) 
prob += x + y, "Objective Function" 
prob += x + y <= 11, "Constraint 1" 
prob += x >= 6, "Constraint 2" 
prob += y >= 6, "Constraint 3" 
prob.solve() 
print("Status: ", LpStatus[prob.status]) 
print("Optimal Solution:") 
print("x = ", value(x)) 
print("y = ", value(y)) 
print("Max Z = ", value(prob.objective))










































