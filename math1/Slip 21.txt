Q.1

(A).Write Python program to Plot the graph of f(x) = x**4 in [0, 5] with red dashed line with circle
 markers

import numpy as np 
import matplotlib.pyplot as plt 
def f(x): 
return x**4 
x = np.linspace(0, 5, 100) 
y = f(x) 
plt.plot(x, y, 'r--o', markersize=6) 
plt.xlabel('x') 
plt.ylabel('f(x)') 
plt.title('Graph of f(x) = x**4') 
plt.show()


(B).Write a Python program to plot the 3D graph of the function f(x) = sin(x^2 
+ y^2), -6< x,y < 6.


import numpy as np 
import matplotlib.pyplot as plt 
from mpl_toolkits.mplot3d import Axes3D 
def f(x, y): 
return np.sin(x**2 + y**2) 
x = np.arange(-6, 6, 0.1) 
y = np.arange(-6, 6, 0.1) 
X, Y = np.meshgrid(x, y) 
Z = f(X, Y) 
fig = plt.figure() 
ax = fig.add_subplot(111, projection='3d') 
ax.plot_surface(X, Y, Z, cmap='viridis') 
ax.set_xlabel('x') 
ax.set_ylabel('y') 
ax.set_zlabel('f(x, y)') 
ax.set_title('3D Graph of f(x, y) = sin(x^2 + y^2)') 
plt.show() 



(C).Write a Python program to plot the 3D graph of the function f(x) = 
e(x^2+y^2)  for x, y belongs [0, 2*pi] using wireframe.



import numpy as np 
import matplotlib.pyplot as plt 
from mpl_toolkits.mplot3d import Axes3D 
def f(x, y): 
return np.exp(x**2 + y**2) 
x = np.linspace(0, 2*np.pi, 100) 
y = np.linspace(0, 2*np.pi, 100) 
X, Y = np.meshgrid(x, y) 
Z = f(X, Y) 
fig = plt.figure() 
ax = fig.add_subplot(111, projection='3d') 
ax.plot_wireframe(X, Y, Z, rstride=5, cstride=5) 
ax.set_xlabel('X') 
ax.set_ylabel('Y') 
ax.set_zlabel('Z') 
ax.set_title('3D Wireframe Plot of f(x) = exp(x^2 + y^2)') 
plt.show()


Q.2

(A).if the line segment joining the points A[2,5]  and [4,-13] is transformed to 
the line segment A’B’ by the transformation matrix [T] = 2 3 4 1 the using python 
find the slope and midpoint of the transformed line.


import numpy as np 
A = np.array([2, 5]) 
B = np.array([4, -13]) 
T = np.array([[2, 3], [4, 1]])              
A_transformed = np.dot(T, A) 
B_transformed = np.dot(T, B) 
slope_transformed = (B_transformed[1] 
(B_transformed[0] - A_transformed[0]) 
A_transformed[1]) 
midpoint_transformed = (A_transformed + B_transformed) / 2 
print("Slope of the transformed line: ", slope_transformed) 
print("Midpoint of the transformed line: ", midpoint_transformed)



(B).Write a python program to plot square with vertices at [4, 4] [2, 4], [2, 2], 
[4, 2] and find its uniform expansion by factor 3, uniform reduction by factor 0.4. 



import numpy as np 
import matplotlib.pyplot as plt 
vertices = np.array([[4, 4], [2, 4], [2, 2], [4, 2], [4, 4]]) 
fig, ax = plt.subplots() 
ax.plot(vertices[:, 0], vertices[:, 1], 'b-o', label='Original Square') 
expansion_factor = 3 
reduction_factor = 0.4 
expanded_vertices = vertices * expansion_factor 
reduced_vertices = vertices * reduction_factor 
ax.plot(expanded_vertices[:, 0], expanded_vertices[:, 1], 'r-o', label='Uniform 
Expansion') 
ax.plot(reduced_vertices[:, 0], reduced_vertices[:, 1], 'g-o', label='Uniform 
Reduction') 
ax.set_xlabel('X') 
ax.set_ylabel('Y') 
ax.set_title('Uniform Expansion and Reduction of a Square') 
ax.legend() 
ax.set_aspect('equal') 
plt.show()


(C).write a Python program to find the equation of the transformed line if 
shearing is applied on the line 2x + y = 3 in x and y direction by 2 and -3 units 
respectively.

import numpy as np 
original_line = np.array([2, 1, -3])  # Coefficients of x, y, and constant term 
shear_matrix_x = np.array([[1, 2, 0],[0, 1, 0],[0, 0, 1]]) 
shear_matrix_y = np.array([[1, 0, 0],[-3, 1, 0],[0, 0, 1]]) 
transformed_line_x = np.dot(shear_matrix_x, original_line) 
transformed_line_y = np.dot(shear_matrix_y, original_line) 
a_x, b_x, c_x = transformed_line_x 
a_y, b_y, c_y = transformed_line_y 
print("Equation of the transformed line after x-direction shear: {}x + {}y = 
{}".format(a_x, b_x, c_x)) 
print("Equation of the transformed line after y-direction shear: {}x + {}y = 
{}".format(a_y, b_y, c_y))



Q.3 
(A).write a Python program to solve the following LPP 
Max Z = 4x + 2y 
Subjected to  
x + y <= 5 
x  - y >= 2  
y <= 2 
x > 0 , y > 0 



from pulp import * 
prob = LpProblem("Maximize Z", LpMaximize) 
x = LpVariable("x", lowBound=0, cat='Continuous')  # x >= 0 
y = LpVariable("y", lowBound=0, cat='Continuous')  # y >= 0 
prob += 4 * x + 2 * y, "Z" 
prob += x + y <= 5, "Constraint 1" 
prob += x - y >= 2, "Constraint 2" 
prob += y <= 2, "Constraint 3" 
prob.solve() 
print("Solution Status: {}".format(LpStatus[prob.status])) 
print("Optimal Solution:") 
print("x = {}".format(value(x))) 
print("y = {}".format(value(y))) 
print("Z = {}".format(value(prob.objective)))

















