
Q.1) Attempt any TWO of the following

(A).Write a python program to draw polygon with vertices [3,3],[4,6],[2,5],[2,2] 
and its trasnslation in X and Y direction using the factors 3,5 respectively 



import matplotlib.pyplot as plt 
import numpy as np 
vertices = np.array([[3, 3], [4, 6], [2, 5], [2, 2]]) 
tx = 3 
ty = 5 
fig, axs = plt.subplots(1, 2) 
axs[0].plot(vertices[:, 0], vertices[:, 1]) 
axs[0].set_title('Original Polygon') 
translation_matrix = np.array([[1, 0, tx], [0, 1, ty], [0, 0, 1]]) 
translated_vertices = np.dot(translation_matrix, np.hstack((vertices, np.ones((len(vertices),
1)))).T).T[:, :-1] 
axs[1].plot(translated_vertices[:, 0], translated_vertices[:, 1]) 
axs[1].set_title('Translated Polygon') 
plt.show() 



(B).Write a python program to plot the graph 2x2-4x+5 in [-10,10] in magneta colored 
dashed pattern


import matplotlib.pyplot as plt 
import numpy as np 
def f(x): 
return 2*x**2 - 4*x + 5 
x = np.linspace(-10, 10, 1000) 
y = f(x) 
plt.plot(x, y, color='magenta', linestyle='--') 
plt.xlabel('x') 
plt.ylabel('y') 
plt.title('Graph of 2x^2 - 4x + 5') 
plt.show()


(C).Write a python program to generate 3D plot of the function z=x2+y2 in -5<x,y<5


import matplotlib.pyplot as plt 
from mpl_toolkits import mplot3d 
import numpy as np 
def f(x, y): 
return x**2 + y**2 
x = np.linspace(-5, 5, 100) 
y = np.linspace(-5, 5, 100) 
X, Y = np.meshgrid(x, y) 
Z = f(X, Y) 
fig = plt.figure() 
ax = fig.add_subplot(111, projection='3d') 
ax.plot_surface(X, Y, Z) 
ax.set_xlabel('x') 
ax.set_ylabel('y') 
ax.set_zlabel('z') 
ax.set_title('3D Plot of z = x^2 + y^2') 
plt.show()


Q.2).Attempt any TWO of the following

(A).Write a python program to generate vector x in the interval [-22,22] using numpy 
package with 80 subintervals

 
import numpy as np 
n = 80 
x = np.linspace(-22, 22, n+1) 
print(x)



(B)Write a python program to rotate the triangle ABC by 90 degree where A[1,2],B[2,-2] 
and C[-1,2] 


 
import numpy as np 
A = np.array([1, 2]) 
B = np.array([2, -2]) 
C = np.array([-1, 2]) 
theta = np.pi/2 
rot_mat = np.array([[np.cos(theta), -np.sin(theta)], 
                    [np.sin(theta), np.cos(theta)]]) 
 
A_rot = np.dot(rot_mat, A) 
B_rot = np.dot(rot_mat, B) 
C_rot = np.dot(rot_mat, C) 
 
print("Rotated triangle:") 
print("A':", A_rot) 
print("B':", B_rot) 
print("C':", C_rot) 


(C).Write a  python program to plot the rectangle with vertices at [2,1],[2,4],[5,4],[5,1] and 
its uniform expansion by factor 4 

import matplotlib.pyplot as plt 
import numpy as np 
rectangle = np.array([[2, 1], [2, 4], [5, 4], [5, 1]]) 
scale_factor = 4 
scale_mat = np.array([[scale_factor, 0],[0, scale_factor]]) 
rectangle_scaled = np.dot(scale_mat, rectangle.T).T 
 
fig, ax = plt.subplots() 
ax.plot(rectangle[:, 0], rectangle[:, 1], label='Original') 
ax.plot(rectangle_scaled[:, 0], rectangle_scaled[:, 1], label='Scaled') 
ax.legend()


Q.3)Attempt the following

(i) Write a python program to solve the following LPP : 
Min    Z=x+y 
Subjcet to  x≥6 
y≥6 
x+y≤11 
x,y≥0


from scipy.optimize import linprog 
c = [1, 1] 
A = [[-1, 0], [0, -1], [1, 1]] 
b = [-6, -6, 11] 
x_bounds = (0, None) 
y_bounds = (0, None) 
res = linprog(c=c, A_ub=A, b_ub=b, bounds=[x_bounds, y_bounds]) 
if res.success: 
print('Optimal value:', res.fun) 
print('x:', res.x[0]) 
print('y:', res.x[1]) 
else: 
print('No solution found.')





















