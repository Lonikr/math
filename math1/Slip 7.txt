Q.1)  
(A)Plot the graph of f(x) = x**4 in [0, 5] with red dashed line with circle
 markers

import numpy as np 
import matplotlib.pyplot as plt 
def f(x): 
     return x**4 
x = np.linspace(0, 5, 100) 
y = f(x) 
plt.plot(x, y, 'r--o', markersize=6) 
plt.xlabel('x') 
plt.ylabel('f(x)') 
plt.title('Graph of f(x) = x**4')  
plt.show()


(B)Using python, generate 3D surface Plot for the function f(x) = sin (x2 + y2) 
in the interval [0,10] 


import numpy as np 
import matplotlib.pyplot as plt 
from mpl_toolkits.mplot3d import Axes3D 
def f(x, y): 
    return np.sin(x**2 + y**2) 
x_values = np.linspace(0, 10, 100) 
y_values = np.linspace(0, 10, 100) 
x_mesh, y_mesh = np.meshgrid(x_values, y_values) 
z_values = f(x_mesh, y_mesh) 
fig = plt.figure() 
ax = fig.add_subplot(111, projection='3d') 
ax.plot_surface(x_mesh, y_mesh, z_values, cmap='viridis') 
ax.set_xlabel('x') 
ax.set_ylabel('y') 
ax.set_zlabel('z') 
ax.set_title('Surface plot of f(x,y) = sin(x^2+y^2)') 
plt.show()


Q.2 
(A)Write a python program to reflect the line segment joining the points A[5,3] & 
B[1,4] through the line y=x+1


import matplotlib.pyplot as plt 
import numpy as np  
A = np.array([5, 3]) 
B = np.array([1, 4]) 
reflection_line = lambda x: x + 1 
plt.plot([A[0], B[0]], [A[1], B[1]], '-o', label='Original Line Segment AB') 
x_vals = np.linspace(-5, 5, 100) 
plt.plot(x_vals, reflection_line(x_vals), '-r', label='Reflection Line y = x + 1') 
reflected_A = np.array([reflection_line(A[0]), A[0]]) 
reflected_B = np.array([reflection_line(B[0]), B[0]]) 
plt.plot([reflected_A[0], reflected_B[0]], [reflected_A[1], reflected_B[1]], '-o', 
label='Reflected Line Segment A\'B\'')  
plt.xlabel('x') 
plt.ylabel('y') 
plt.title('Line Segment Reflection') 
plt.legend() 
plt.show()


(B)using sympy the point P(5,2),Q(5-2)


from sympy import Point, Line 
P = Point(5, 2) 
Q = Point(5, -2) 
R = Point(5, 0)  
line_PQ = Line(P, Q) 
line_PR = Line(P, R) 
collinear = line_PQ.is_parallel(line_PR) 
if collinear: 
    print("Points P, Q, and R are collinear") 
else: 
    print("Points P, Q, and R are not collinear") 
length_PQ = P.distance(Q) 
slope_PQ = (Q.y - P.y) / (Q.x - P.x) 
print("Length of the ray PQ:", length_PQ) 
print("Slope of the ray PQ:", slope_PQ)

Q.3
 (ii)Write a Python program in 3D to rotate the point (1, 0, 0) through X Plane 
in anticlockwise direction (Rotation through Z axis) by an angle of 90Â°.




import numpy as np 
import matplotlib.pyplot as plt 
point = np.array([1, 0, 0]) 
angle = np.radians(90) 
rotation_matrix = np.array([[np.cos(angle), -np.sin(angle), 0], 
[np.sin(angle), np.cos(angle), 0], 
[0, 0, 1]])  
rotated_point = np.dot(rotation_matrix, point) 
fig = plt.figure() 
ax = fig.add_subplot(111, projection='3d') 
ax.scatter(point[0], point[1], point[2], c='r', marker='o', label='Original Point') 
ax.scatter(rotated_point[0], rotated_point[1], rotated_point[2], c='g', marker='o', 
label='Rotated Point')  
ax.set_xlabel('X') 
ax.set_ylabel('Y') 
ax.set_zlabel('Z')  
ax.set_title('3D Rotation')  
ax.legend() 
plt.show()
















































































































































