Q.1) 
(A).Write a python in 3D to rotate the point (1,0,0) through XY plane in
 Clockwise direction (Rotation Through Z – Axis by an angle of 900)


import numpy as np 
import matplotlib.pyplot as plt 
from mpl_toolkits.mplot3d import Axes3D 
point = np.array([1, 0, 0]) 
angle = np.radians(90) 
rotation_matrix = np.array([[np.cos(angle), -np.sin(angle), 0], 
[np.sin(angle), np.cos(angle), 0], 
[0, 0, 1]]) 
point_rotated = np.dot(rotation_matrix, point) 
fig = plt.figure() 
ax = fig.add_subplot(111, projection='3d') 
ax.scatter(point[0], point[1], point[2], color='red', label='Original Point') 
ax.scatter(point_rotated[0], point_rotated[1], point_rotated[2], color='blue', 
label='Rotated Point') 
ax.set_xlabel('X') 
ax.set_ylabel('Y') 
ax.set_zlabel('Z') 
ax.legend() 
plt.show() 


(C).Write a Python program to plot 3D line graph Whose parametric equation is 
(cos(2x),sin(2x),x) for 10 <= x <= 20 (in red color), with title of the graph.


import numpy as np 
import matplotlib.pyplot as plt 
from mpl_toolkits.mplot3d import Axes3D 
x = np.linspace(10, 20, 500) 
y = np.sin(2 * x) 
z = x 
x = np.cos(2 * x) 
fig = plt.figure() 
ax = fig.add_subplot(111, projection='3d') 
ax.plot(x, y, z, color='red') 
ax.set_title("3D Line Graph: (cos(2x), sin(2x), x)") 
ax.set_xlabel('X') 
ax.set_ylabel('Y') 
ax.set_zlabel('Z') 
plt.show()  


(B).Using python, represent the following information using a bar graph (in 
green color)


import matplotlib.pyplot as plt  
left = [1,2,3,4,5] 
height = [600,4000,200,1500,] 
tick_label=[‘clothing’,’food’,’rent’,’petrol’,’Misc’] 
plt.bar (left,height,tick_label = tick_label,width = 0.8 ,color = ['green','green']) 
plt.xlabel('Item') 
plt.ylabel('Expenditure') 
plt. show() 


Q.2
(A).Write a python program to rotate the ABC by 90° where A(1, 1), B(2, -2), 
C(1, 2).


import numpy as np 
A = np.array([1, 1]) 
B = np.array([2, -2]) 
C = np.array([1, 2]) 
angle = np.radians(90) 
rotation_matrix = np.array([[np.cos(angle), -np.sin(angle)], 
[np.sin(angle), np.cos(angle)]]) 
A_rotated = np.dot(rotation_matrix, A) 
B_rotated = np.dot(rotation_matrix, B) 
C_rotated = np.dot(rotation_matrix, C) 
print("Rotated Point A: ", A_rotated) 
print("Rotated Point B: ", B_rotated) 
print("Rotated Point C: ", C_rotated)


(B).Write a Python program to draw a polygon with vertices (0, 0), (2, 0), (2, 3) 
and (1, 6) and rotate it by 180° .


import matplotlib.pyplot as plt 
import numpy as np 
vertices = np.array([[0, 0], [2, 0], [2, 3], [1, 6]]) 
plt.figure() 
plt.plot(vertices[:, 0], vertices[:, 1], 'bo-') 
plt.title('Original Polygon') 
plt.xlabel('X') 
plt.ylabel('Y') 
rotation_matrix = np.array([[np.cos(theta), -np.sin(theta)], 
[np.sin(theta), np.cos(theta)]]) 
vertices_rotated = np.dot(vertices, rotation_matrix) 
plt.figure() 
plt.plot(vertices_rotated[:, 0], vertices_rotated[:, 1], 'ro-') 
plt.title('Rotated Polygon (180 degrees)') 
plt.xlabel('X') 
plt.ylabel('Y') 
plt.show()


(C)Write a Python program to find the area and perimeter of the  ABC, where 
A[0, 0] B[5, 0], C[3,3].

import numpy as np 
A = np.array([0, 0]) 
B = np.array([5, 0]) 
C = np.array([3, 3]) 
AB = np.linalg.norm(B - A) 
BC = np.linalg.norm(C - B) 
CA = np.linalg.norm(A - C) 
s = (AB + BC + CA) / 2 
area = np.sqrt(s * (s - AB) * (s - BC) * (s - CA)) 
perimeter = AB + BC + CA 
print("Triangle ABC:") 
print("Side AB:", AB) 
print("Side BC:", BC) 
print("Side CA:", CA) 
print("Area:", area) 
print("Perimeter:", perimeter)














































































