

































































Q1 . Attempt any TWO of the following


(A).Write a python program to plot 3D axes with labels as X-axis ,Y-axis and Z-axis and
also pack following point with given Coordination in the same graph :(70,-25,15) as a
diamond in black color



import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.set_xlabel('X-axis')
ax.set_ylabel('Y-axis')
ax.set_zlabel('Z-axis')
x, y, z = (70,-25,15)
ax.scatter(x, y, z, marker='D', color='black')
plt.show()



(B).Plot the graph of y=e-x2 in [-5,5] with red dashed-points line with Upward Pointing triangle

import numpy as np
import matplotlib.pyplot as plt
def f(x):
 return np.exp(-x**2)
x = np.linspace(-5, 5, 100)
y = f(x)
fig, ax = plt.subplots()
ax.set_xlim([-5, 5])
ax.set_ylim([0, 1])
ax.plot(x, y, 'r-->', markersize=5)
ax.set_xlabel('x')
ax.set_ylabel('y')
plt.show()



(C).Draw a bar graph in GREEN colour to reprenset the data below :

import matplotlib.pyplot as plt
subjects = ['Maths', 'Science', 'English', 'Marathi', 'Hindi']
percentages = [68, 90, 70, 85, 91]
fig, ax = plt.subplots()
ax.set_ylim([0, 100])
ax.bar(subjects, percentages, color='green')
ax.set_xlabel('Subject')
ax.set_ylabel('Percentage of passing')
plt.show()



Q2 ) Attempt any TWO of the following


(A).Write a python program to reflect the ∆ABC through the line Y=3 where
A(1,0),B(2,-1),C(-1,3)

import numpy as np
import matplotlib.pyplot as plt
A = np.array([1, 0])
B = np.array([2, -1])
C = np.array([-1, 3])
triangle = np.array([A, B, C, A])
line = np.array([[-5, 3], [5, 3]])
translation_matrix = np.array([[1, 0, 0], [0, 1, -3], [0, 0, 1]])
reflection_matrix = np.array([[1, 0, 0], [0, -1, 0], [0, 0, 1]])
reflected_triangle = np.dot(reflection_matrix, np.concatenate((triangle.T, np.ones((1,
4))), axis=0)).T[:, :2]
inverse_translation_matrix = np.array([[1, 0, 0], [0, 1, 3], [0, 0, 1]])
reflected_triangle = np.dot(inverse_translation_matrix,
np.concatenate((reflected_triangle.T, np.ones((1, 4))), axis=0)).T[:, :2]
fig, ax = plt.subplots()
ax.plot(triangle[:, 0], triangle[:, 1], label='ABC')
ax.plot(reflected_triangle[:, 0], reflected_triangle[:, 1], label='A\'B\'C\'')
ax.plot(line[:, 0], line[:, 1], 'k--', label='Y = 3')
ax.set_xlim([-5, 5])
ax.set_ylim([-5, 5])
ax.set_aspect('equal')
ax.legend()
plt.show()



(B) Write a python program to rotate the ∆ABC by 90⸰ where A(1,2),B(2,-2),C(-1,2)


import numpy as np
import matplotlib.pyplot as plt
A = np.array([1, 2])
B = np.array([2, -2])
C = np.array([-1, 2])
triangle = np.array([A, B, C, A])
angle = np.radians(90)
rotation_matrix = np.array([[np.cos(angle), -np.sin(angle)], [np.sin(angle),
np.cos(angle)]])
rotated_triangle = np.dot(rotation_matrix, triangle.T).T
fig, ax = plt.subplots()
ax.plot(triangle[:, 0], triangle[:, 1], label='ABC')
ax.plot(rotated_triangle[:, 0], rotated_triangle[:, 1], label='A\'B\'C\'')
ax.set_xlim([-5, 5])
ax.set_ylim([-5, 5])
ax.set_aspect('equal')
ax.legend()
plt.show()



(C).Write a python program to draw a polygon with 6 sides and radius 1 centered
at (1,2) and find its area and perimeter

import matplotlib.pyplot as plt
import numpy as np
x_center = 1
y_center = 2
n_sides = 6
radius = 1
angles = np.linspace(0, 2 * np.pi, n_sides, endpoint=True)
x = x_center + radius * np.cos(angles)
y = y_center + radius * np.sin(angles)
plt.plot(x, y)
plt.axis('equal')
plt.show()
side_length = 2 * radius * np.sin(np.pi/n_sides)
perimeter = n_sides * side_length
area = (n_sides * radius**2 * np.sin(2 * np.pi / n_sides))/2
print("Perimeter:", perimeter)
print("Area:", area)


Q3 ) Attempt any ONE of the following

 (i) Attempt any ONE of the following
 A ) Solve LPP by using Python :
Min Z=x+y
Subject to x≥6
 y≥6
 x+y≥11
 x,y≥0


from scipy.optimize import linprog
c = [1, 1]
A = [[-1, 0], [0, -1], [-1, -1]]
b = [-6, -6, -11]
x_bounds = (0, None)
y_bounds = (0, None)
res = linprog(c, A_ub=A, b_ub=b, bounds=[x_bounds, y_bounds])
print('Optimal value:', res.fun)
print('x:', res.x[0])
print('y:', res.x[1])



(B) Attempt Any one of the following
(i).Write a python program to apply the following transformation on the point (-2,4) :
 I ) Reflection through X-axis
 II ) Scaling in X-coordinate by factor 6
 III) Scaling in x-direction by 4 units
 IV ) Rotate about origin through an angle 30⸰


import math
point = [-2, 4]
reflected_point = [point[0], -1*point[1]]
print("I) Reflection through X-axis:", reflected_point)
scaled_point = [6*point[0], point[1]]
print("II) Scaling in X-coordinate by factor 6:", scaled_point)
shifted_point = [point[0] + 4, point[1]]
print("III) Scaling in x-direction by 4 units:", shifted_point)
angle = math.radians(30)
rotated_point = [point[0]*math.cos(angle) - point[1]*math.sin(angle),
 point[0]*math.sin(angle) + point[1]*math.cos(angle)]
print("IV) Rotate about origin through an angle 30⸰:", rotated_point)











































