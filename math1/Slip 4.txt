Q.1
(A) Write a Python program to plot graph of the functions f(x) = log10(x)  in
 [0,10]

import numpy as np 
import matplotlib.pyplot as plt 
x = np.linspace(0,10) 
y = np.log10(x) 
plt.plot(x, y) 
plt.xlabel('x') 
plt.ylabel('f(x) = log10(x)') 
plt.title('2D Graph of f(x) = log10(x)') 
plt.grid(True) 
plt.show() 


(B) Write a Python program to plot graph of the functions f(x) = sin-1 (x)  in [
1,1]


import numpy as np 
import matplotlib.pyplot as plt 
x = np.linspace(-1,1) 
y = 1/np.sin(x) 
plt.plot(x, y) 
plt.xlabel('x') 
plt.ylabel('f(x) = sin-1(X)') 
plt.title('2D Graph of f(x) = log10(x)') 
plt.grid(True) 
plt.show() 

(C).Using Python plot the surface plot of parabola z = x**2 + y**2 in -6 <x,y<6  

import numpy as np 
import matplotlib.pyplot as plt 
from mpl_toolkits.mplot3d import Axes3D 
x = np.linspace(-6, 6, 100)  
y = np.linspace(-6, 6, 100)  
X, Y = np.meshgrid(x, y)     
Z = X**2 + Y**2             
fig = plt.figure() 
ax = fig.add_subplot(111, projection='3d') 
ax.plot_surface(X, Y, Z, cmap='viridis') 
ax.set_xlabel('X') 
ax.set_ylabel('Y') 
ax.set_zlabel('Z') 
ax.set_title('Parabola Surface Plot') 
plt.show() 

Q.3
(A) If the line with points A[3, 1], B[5, -1] is transformed by the transformation 
matrix [T] = 3 −2
 2 1  then using python, find the equation of transformed line.



import numpy as np 
import matplotlib.pyplot as plt 
A = np.array([3, 1]) 
B = np.array([5, -1]) 
T = np.array([[3, -2], 
[2, 1]])  
A_transformed = np.dot(T, A) 
B_transformed = np.dot(T, B) 
A_transformed_x = A_transformed[0] 
A_transformed_y = A_transformed[1] 
B_transformed_x = B_transformed[0] 
B_transformed_y = B_transformed[1]  
m = (B_transformed_y - A_transformed_y) / (B_transformed_x - 
A_transformed_x) 
b = A_transformed_y - m * A_transformed_x 
print(f"The equation of the transformed line is: y = {m:.2f}x + {b:.2f}")


(B). Write a Python program to draw a polygon with vertices (0,0), (2,0), (2,3) 
and (1,6) and rotate by 1800


import matplotlib.pyplot as plt 
import numpy as np  
vertices = np.array([[0, 0], 
[2, 0], 
[2, 3], 
[1, 6], 
[0, 0]]) 
plt.plot(vertices[:, 0], vertices[:, 1], 'b-', label='Original Polygon') 
angle_rad = np.deg2rad(180) 
rotation_matrix = np.array([[np.cos(angle_rad), -np.sin(angle_rad)], 
[np.sin(angle_rad), np.cos(angle_rad)]])  
vertices_rotated = np.dot(rotation_matrix, vertices.T).T 
plt.plot(vertices_rotated[:, 0], vertices_rotated[:, 1], 'r-', label='Rotated Polygon')  
plt.xlim(-7, 7) 
plt.ylim(-7, 7) 
plt.xlabel('X') 
plt.ylabel('Y') 
plt.legend()  
plt.show()

(C) Using python, generate line passing through points (2,3) and (4,3) and 
equation of the line

import matplotlib.pyplot as plt 
import numpy as np  
x = np.array([2, 4]) 
y = np.array([3, 3]) 
m = (y[1] - y[0]) / (x[1] - x[0]) 
b = y[0] - m * x[0] 
print(f"The equation of the line is: y = {m:.2f}x + {b:.2f}")  
plt.scatter(x, y, c='blue', label='Points') 
plt.plot(x, m * x + b, c='red', label='Line') 
plt.xlabel('X') 
plt.ylabel('Y') 
plt.title('Line Passing through Points') 
plt.legend() 
plt.show() 


(B). Plot 3D axes with labels X - axis and z –axis and also plot following points 
with given coordinate in one graph  



import matplotlib.pyplot as plt 
import numpy as np  
fig = plt.figure() 
ax = fig.add_subplot(111, projection='3d') 
ax.set_xlabel('X-axis') 
ax.set_zlabel('Z-axis')  
points = {'(70, -25, 15)': (70, -25, 15),
'(50, 72, -45)': (50, 72, -45), 
'(58, -82, 65)': (58, -82, 65), 
'(20, 72, -45)': (20, 72, -45)} 
for label, (x, y, z) in points.items(): 
    if label == '(70, -25, 15)': 
        ax.scatter(x, y, z, marker='D', color='black', label=label) 
    elif label == '(50, 72, -45)': 
        ax.scatter(x, y, z, marker='*', color='green', label=label) 
    elif label == '(58, -82, 65)': 
        ax.scatter(x, y, z, marker='.', color='green', label=label) 
    elif label == '(20, 72, -45)': 
        ax.scatter(x, y, z, marker='*', color='red', label=label) 
ax.legend() 
plt.show() 



























































