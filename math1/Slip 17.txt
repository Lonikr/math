Q.1) Write a python program to plot the 3D graph of the function z = x^2 + y^2
 in -6 < x, y < 6 using surface plot



import matplotlib.pyplot as plt 
import numpy as np 
x = np.linspace(-6, 6, 100) 
y = np.linspace(-6, 6, 100) 
X, Y = np.meshgrid(x, y) 
Z = X**2 + Y**2 
fig = plt.figure() 
ax = fig.add_subplot(111, projection='3d') 
ax.plot_surface(X, Y, Z, cmap='viridis') 
ax.set_xlabel('X-axis') 
ax.set_ylabel('Y-axis') 
ax.set_zlabel('Z-axis') 
ax.set_title('3D Surface Plot of z = x^2 + y^2') 
plt.show()


(B).Write a python program to plot 3D contours for the function f(x,y) = 
log(x^2y2) when -5<=x,y<=5 with green color map 


import matplotlib.pyplot as plt 
import numpy as np 
x = np.linspace(-5, 5, 100) 
y = np.linspace(-5, 5, 100) 
X, Y = np.meshgrid(x, y) 
Z = np.log(X**2 * Y**2) 
fig = plt.figure() 
ax = fig.add_subplot(111, projection='3d') 
ax.contour(X, Y, Z, cmap='Greens') 
ax.set_xlabel('X-axis') 
ax.set_ylabel('Y-axis') 
ax.set_zlabel('f(x, y)') 
ax.set_title('3D Contour Plot of f(x, y) = log(x^2 * y^2)') 
plt.show() 


(C).Write a Python program to reflect the line segment joining the points A[-5, 
2] and D[l, 3] through the line y = x.


import matplotlib.pyplot as plt 
import numpy as np 
A = np.array([-5, 2]) 
D = np.array([1, 3]) 
def reflect_y_equals_x(point): 
return np.array([point[1], point[0]]) 
A_reflected = reflect_y_equals_x(A) 
D_reflected = reflect_y_equals_x(D) 
fig, ax = plt.subplots() 
ax.plot([A[0], D[0]], [A[1], D[1]], 'b', label='Original Line Segment AD') 
ax.plot([A_reflected[0], D_reflected[0]], [A_reflected[1], D_reflected[1]], 'r', 
label='Reflected Line Segment A\'D\'') 
ax.plot([-6, 6], [-6, 6], 'k--', label='Line y = x')  # Plot the line y = x 
ax.legend() 
ax.set_xlabel('X-axis') 
ax.set_ylabel('Y-axis') 
ax.set_title('Reflection of Line Segment AD through y = x') 
plt.axis('equal') 
plt.grid(True) 
plt.show()



Q.2 Attempt any TOW of the following.

(A).Write a python program to plot triangle with vertices [3, 3], [5, 6], [5, 2], 
and its rotation about the origin by angle â€“pi radians.


import matplotlib.pyplot as plt 
import numpy as np 
A = np.array([3, 3]) 
B = np.array([5, 6]) 
C = np.array([5, 2]) 
theta = -np.pi 
rotation_matrix = np.cos(theta)]])                            
np.array([[np.cos(theta), -np.sin(theta)],[np.sin(theta), 
A_rotated = np.dot(rotation_matrix, A) 
B_rotated = np.dot(rotation_matrix, B) 
C_rotated = np.dot(rotation_matrix, C) 
fig, ax = plt.subplots() 
ax.plot([A[0], B[0], C[0], A[0]], [A[1], B[1], C[1], A[1]], 'b', label='Original 
Triangle ABC') 
ax.plot([A_rotated[0], B_rotated[0], C_rotated[0], A_rotated[0]], [A_rotated[1], 
B_rotated[1], C_rotated[1], A_rotated[1]], 'r', label='Rotated Triangle A\'B\'C\'') 
ax.scatter(A[0], A[1], color='g', marker='o', label='A')  # Plot vertex A 
ax.scatter(B[0], B[1], color='g', marker='o', label='B')  # Plot vertex B 
ax.scatter(C[0], C[1], color='g', marker='o', label='C')  # Plot vertex C 
ax.scatter(0, 0, color='g', marker='o', label='Origin')  # Plot origin 
ax.legend() 
ax.set_xlabel('X-axis') 
ax.set_ylabel('Y-axis') 
ax.set_title('Rotation of Triangle ABC by -pi Radians around Origin') 
plt.axis('equal') 
plt.grid(True) 
plt.show()


(C).Write a python program to draw a polygon with vertices (0, 0), (1, 0), (2, 
2), (1, 4) and find its area and perimeter.

import matplotlib.pyplot as plt 
import numpy as np 
vertices = np.array([[0, 0], [1, 0], [2, 2], [1, 4], [0, 0]]) 
x = vertices[:, 0] 
y = vertices[:, 1] 
fig, ax = plt.subplots() 
ax.plot(x, y, 'b', label='Polygon') 
area = 0.5 * np.abs(np.dot(x, np.roll(y, 1)) - np.dot(y, np.roll(x, 1))) 
perimeter = np.sum(np.sqrt(np.diff(x) ** 2 + np.diff(y) ** 2)) 
print("Area of the polygon: ", area) 
print("Perimeter of the polygon: ", perimeter) 
ax.set_xlabel('X-axis') 
ax.set_ylabel('Y-axis') 
ax.set_title('Polygon with Vertices (0, 0), (1, 0), (2, 2), (1, 4)') 
ax.legend()


Q,3
(A)write a Python program to solve the following LPP 
Max Z = 4x + y + 3z + 5w 
Subjected to  
4x + 6y - 5z - 4w >= -20 -8x - 3y + 3z + 2w <= 5 20 
x > 0 , y > 0



from pulp import * 
lp_problem = LpProblem("Linear_Programming_Problem", 
LpMaximize) 
x = LpVariable('x', lowBound=0, cat='Continuous') 
y = LpVariable('y', lowBound=0, cat='Continuous') 
z = LpVariable('z', lowBound=0, cat='Continuous') 
w = LpVariable('w', lowBound=0, cat='Continuous') 
lp_problem += 4*x + y + 3*z + 5*w 
lp_problem += 4*x + 6*y - 5*z - 4*w >= -20 
lp_problem += -8*x - 3*y + 3*z + 2*w <= 5 
lp_problem += x >= 0 
lp_problem += y >= 0 
lp_problem.solve() 
print("Status: ", LpStatus[lp_problem.status]) 
print("Optimal Values:") 
print("x = ", x.varValue) 
print("y = ", y.varValue) 
print("z = ", z.varValue) 
print("w = ", w.varValue) 
print("Optimal Objective Function Value = ", lpSum([4*x, y, 3*z,5*w]).getValue())



















































