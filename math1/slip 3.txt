Q.1
(A)Write a Python program to plot graph of the functions f(x) = cos(x)  in
 [0,2*pi]


import numpy as np 
import matplotlib.pyplot as plt 
x = np.linspace(0,2*np.pi)  
y = np.cos(x)  
plt.plot(x, y) 
plt.xlabel('x') 
plt.ylabel('f(x) = log10(x)') 
plt.title('2D Graph of f(x) = log10(x)') 
plt.grid(True) 
plt.show() 

(C)Write a Python program to generate 3D plot of the functions z = sin x +cos 
y in -10 < x, y < 10. 


import numpy as np 
import matplotlib.pyplot as plt 
from mpl_toolkits.mplot3d import Axes3D  
x = np.linspace(-10, 10, 100) 
y = np.linspace(-10, 10, 100) 
X, Y = np.meshgrid(x, y) 
Z = np.sin(X) + np.cos(Y) 
fig = plt.figure() 
ax = fig.add_subplot(111, projection='3d')  
surf = ax.plot_surface(X, Y, Z, cmap='viridis')  
ax.set_xlabel('X') 
ax.set_ylabel('Y') 
ax.set_zlabel('Z') 
ax.set_title('3D Plot of z = sin(x) + cos(y)')  
plt.show() 


(B)Following is the information of student participating in various games in 
school. Represent it by a Bar graph with bar width 0.7 inches. 


import matplotlib.pyplot as plt  
left = [1,2,3,4,5] 
height = [65,30,54,10,20] 
tick_label=['Cricket','Football','Hockey','Chess','Tennis'] 
plt.bar (left,height,tick_label = tick_label,width = 0.7 ,color = ['orange','green']) 
plt.xlabel('Games') 
plt.ylabel('No.Of Student') 
plt. show()




Q.2
(A) If the line with points A[2, 1], B[4, -1] is transformed by the transformation 
matrix [T] = 1 2
 2 1  then using python, find the equation of transformed line.


import numpy as np 
A = np.array([2, 1]) 
B = np.array([4, -1])  
T = np.array([[1, 2], [2, 1]]) 
A_transformed = np.dot(T, A) 
B_transformed = np.dot(T, B)  
x1_transformed, y1_transformed = A_transformed 
x2_transformed, y2_transformed = B_transformed 
m_transformed = (y2_transformed - y1_transformed) / (x2_transformed - 
x1_transformed) 
b_transformed = y1_transformed - m_transformed * x1_transformed 
equation_transformed = f'y = {m_transformed} * x + {b_transformed}' 
print("Equation of transformed line: ", equation_transformed)

(B)Generate line segment having endpoints (0, 0) and (10, 10) find midpoint 
of line segment.


x1, y1 = 0, 0 
x2, y2 = 10, 10 
midpoint_x = (x1 + x2) / 2 
midpoint_y = (y1 + y2) / 2 
print("Midpoint: ({}, {})".format(midpoint_x, midpoint_y))



Q.3

(B)
(i)Apply Python. Program in each of the following transformation on the point 
P[4,-2]

import numpy as np 
P = np.array([4, -2])  
reflection_y_axis = np.array([-1, 1]) * P 
scaling_x = np.array([3, 1]) * P 
scaling_y = np.array([1, 2.5]) * P 
reflection_line = np.array([1, -1]) * P 
print("Original point P:", P) 
print("Reflection through y-axis:", reflection_y_axis) 
print("Scaling in X-coordinates by factor 3:", scaling_x) 
print("Scaling in Y-coordinates by factor 2.5:", scaling_y) 
print("Reflection through the line y = -x:", reflection_line)

(ii) Find the combined transformation of the line segment between the point 
A[2, -1] & B[5, 4] by using Python program for the following sequence of 
transformation:- 



import numpy as np  
A = np.array([2, -1]) 
B = np.array([5, 4]) 
rotation_angle = np.pi 
rotation_matrix = np.array([[np.cos(rotation_angle), -np.sin(rotation_angle)], 
[np.sin(rotation_angle), np.cos(rotation_angle)]]) 
A_rotation = np.dot(rotation_matrix, A) 
B_rotation = np.dot(rotation_matrix, B) 
scaling_x = np.array([3, 1]) 
A_scaling_x = scaling_x * A 
B_scaling_x = scaling_x * B 
shearing_x = np.array([1, 0]) + np.array([6, 0]) 
A_shearing_x = A + shearing_x * A 
B_shearing_x = B + shearing_x * B 
reflection_line = np.array([1, -1]) 
A_reflection_line = reflection_line * A 
B_reflection_line = reflection_line * B 
print("Original line segment between A and B:") 
print("A =", A) 
print("B =", B) 
print("Transformation 1: Rotation about origin through an angle of pi:") 
print("A after rotation =", A_rotation) 
print("B after rotation =", B_rotation) 
print("Transformation 2: Scaling in X-coordinate by 3 units:") 
print("A after scaling in X-coordinate =", A_scaling_x) 
print("B after scaling in X-coordinate =", B_scaling_x) 
print("Transformation 3: Shearing in X-direction by 6 units:") 
print("A after shearing in X-direction =", A_shearing_x) 
print("B after shearing in X-direction =", B_shearing_x) 
print("Transformation 4: Reflection through the line y = x:") 
print("A after reflection through y = x =", A_reflection_line) 
print("B after reflection through y = x =", B_reflection_line)
































































































